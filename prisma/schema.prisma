// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id       String    @id @default(cuid())
    name     String
    email    String    @unique
    password String
    sessions Session[]
    Account  Account[]
    Resume   Resume[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Template {
    BASIC
}

model Resume {
    id           String       @id @default(cuid())
    userId       String
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime     @default(now()) @map("created_at")
    updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at")
    template     Template
    resumeTitle  String?
    firstName    String?      @map("first_name")
    lastName     String?      @map("last_name")
    summary      String?
    currentTitle String?      @map("current_title")
    email        String?
    phone        String?
    website      String?
    previewImage String?      @map("preview_image")
    education    Education[]
    experience   Experience[]
    projects     Project[]
}

model Education {
    id          String    @id @default(uuid())
    resumeId    String
    resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
    institution String?
    degree      String?
    city        String?
    state       String?
    description String?
    index       Int
    startDate   DateTime? @map("start_date")
    endDate     DateTime? @map("end_date")
}

model Experience {
    id          String    @id @default(uuid())
    resumeId    String
    resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
    company     String?
    position    String?
    city        String?
    state       String?
    description String?
    index       Int
    isCurrent   Boolean?  @default(false) @map("is_current")
    startDate   DateTime? @map("start_date")
    endDate     DateTime? @map("end_date")
}

model Project {
    id          String   @id @default(uuid())
    resumeId    String
    resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
    title       String?
    description String?
    index       Int
}
